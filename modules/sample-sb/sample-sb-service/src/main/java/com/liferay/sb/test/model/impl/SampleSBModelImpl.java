/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.sb.test.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.NoSuchModelException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ContainerModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.TrashedModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.kernel.workflow.WorkflowConstants;
import com.liferay.sb.test.model.SampleSB;
import com.liferay.sb.test.model.SampleSBModel;
import com.liferay.sb.test.model.SampleSBSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SampleSB service. Represents a row in the &quot;SampleSB_SampleSB&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SampleSBModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SampleSBImpl}.
 * </p>
 *
 * @author "yasuflatland"
 * @see SampleSBImpl
 * @generated
 */
@JSON(strict = true)
public class SampleSBModelImpl
	extends BaseModelImpl<SampleSB> implements SampleSBModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sample sb model instance should use the <code>SampleSB</code> interface instead.
	 */
	public static final String TABLE_NAME = "SampleSB_SampleSB";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"samplesbId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"samplesbBooleanStat", Types.BOOLEAN},
		{"samplesbDateTime", Types.TIMESTAMP},
		{"samplesbDocumentLibrary", Types.VARCHAR},
		{"samplesbDouble", Types.DOUBLE}, {"samplesbInteger", Types.INTEGER},
		{"samplesbRichText", Types.VARCHAR}, {"samplesbText", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"urlTitle", Types.VARCHAR}, {"samplesbTitleName", Types.VARCHAR},
		{"samplesbSummaryName", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplesbId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplesbBooleanStat", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("samplesbDateTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("samplesbDocumentLibrary", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplesbDouble", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("samplesbInteger", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("samplesbRichText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplesbText", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("urlTitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplesbTitleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("samplesbSummaryName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table SampleSB_SampleSB (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,samplesbId LONG not null primary key,title VARCHAR(80) null,samplesbBooleanStat BOOLEAN,samplesbDateTime DATE null,samplesbDocumentLibrary VARCHAR(512) null,samplesbDouble DOUBLE,samplesbInteger INTEGER,samplesbRichText TEXT null,samplesbText TEXT null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,urlTitle VARCHAR(75) null,samplesbTitleName VARCHAR(255) null,samplesbSummaryName TEXT null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table SampleSB_SampleSB";

	public static final String ORDER_BY_JPQL =
		" ORDER BY sampleSB.samplesbId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY SampleSB_SampleSB.samplesbId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long SAMPLESBBOOLEANSTAT_COLUMN_BITMASK = 4L;

	public static final long SAMPLESBDATETIME_COLUMN_BITMASK = 8L;

	public static final long SAMPLESBDOCUMENTLIBRARY_COLUMN_BITMASK = 16L;

	public static final long SAMPLESBDOUBLE_COLUMN_BITMASK = 32L;

	public static final long SAMPLESBID_COLUMN_BITMASK = 64L;

	public static final long SAMPLESBINTEGER_COLUMN_BITMASK = 128L;

	public static final long SAMPLESBRICHTEXT_COLUMN_BITMASK = 256L;

	public static final long SAMPLESBTEXT_COLUMN_BITMASK = 512L;

	public static final long STATUS_COLUMN_BITMASK = 1024L;

	public static final long TITLE_COLUMN_BITMASK = 2048L;

	public static final long URLTITLE_COLUMN_BITMASK = 4096L;

	public static final long USERID_COLUMN_BITMASK = 8192L;

	public static final long UUID_COLUMN_BITMASK = 16384L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SampleSB toModel(SampleSBSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SampleSB model = new SampleSBImpl();

		model.setMvccVersion(soapModel.getMvccVersion());
		model.setUuid(soapModel.getUuid());
		model.setSamplesbId(soapModel.getSamplesbId());
		model.setTitle(soapModel.getTitle());
		model.setSamplesbBooleanStat(soapModel.isSamplesbBooleanStat());
		model.setSamplesbDateTime(soapModel.getSamplesbDateTime());
		model.setSamplesbDocumentLibrary(
			soapModel.getSamplesbDocumentLibrary());
		model.setSamplesbDouble(soapModel.getSamplesbDouble());
		model.setSamplesbInteger(soapModel.getSamplesbInteger());
		model.setSamplesbRichText(soapModel.getSamplesbRichText());
		model.setSamplesbText(soapModel.getSamplesbText());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUrlTitle(soapModel.getUrlTitle());
		model.setSamplesbTitleName(soapModel.getSamplesbTitleName());
		model.setSamplesbSummaryName(soapModel.getSamplesbSummaryName());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SampleSB> toModels(SampleSBSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SampleSB> models = new ArrayList<SampleSB>(soapModels.length);

		for (SampleSBSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public SampleSBModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _samplesbId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSamplesbId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _samplesbId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SampleSB.class;
	}

	@Override
	public String getModelClassName() {
		return SampleSB.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SampleSB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SampleSB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SampleSB, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SampleSB)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SampleSB, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SampleSB, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SampleSB)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SampleSB, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SampleSB, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, SampleSB>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			SampleSB.class.getClassLoader(), SampleSB.class,
			ModelWrapper.class);

		try {
			Constructor<SampleSB> constructor =
				(Constructor<SampleSB>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<SampleSB, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SampleSB, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SampleSB, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SampleSB, Object>>();
		Map<String, BiConsumer<SampleSB, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SampleSB, ?>>();

		attributeGetterFunctions.put("mvccVersion", SampleSB::getMvccVersion);
		attributeSetterBiConsumers.put(
			"mvccVersion",
			(BiConsumer<SampleSB, Long>)SampleSB::setMvccVersion);
		attributeGetterFunctions.put("uuid", SampleSB::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<SampleSB, String>)SampleSB::setUuid);
		attributeGetterFunctions.put("samplesbId", SampleSB::getSamplesbId);
		attributeSetterBiConsumers.put(
			"samplesbId", (BiConsumer<SampleSB, Long>)SampleSB::setSamplesbId);
		attributeGetterFunctions.put("title", SampleSB::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<SampleSB, String>)SampleSB::setTitle);
		attributeGetterFunctions.put(
			"samplesbBooleanStat", SampleSB::getSamplesbBooleanStat);
		attributeSetterBiConsumers.put(
			"samplesbBooleanStat",
			(BiConsumer<SampleSB, Boolean>)SampleSB::setSamplesbBooleanStat);
		attributeGetterFunctions.put(
			"samplesbDateTime", SampleSB::getSamplesbDateTime);
		attributeSetterBiConsumers.put(
			"samplesbDateTime",
			(BiConsumer<SampleSB, Date>)SampleSB::setSamplesbDateTime);
		attributeGetterFunctions.put(
			"samplesbDocumentLibrary", SampleSB::getSamplesbDocumentLibrary);
		attributeSetterBiConsumers.put(
			"samplesbDocumentLibrary",
			(BiConsumer<SampleSB, String>)SampleSB::setSamplesbDocumentLibrary);
		attributeGetterFunctions.put(
			"samplesbDouble", SampleSB::getSamplesbDouble);
		attributeSetterBiConsumers.put(
			"samplesbDouble",
			(BiConsumer<SampleSB, Double>)SampleSB::setSamplesbDouble);
		attributeGetterFunctions.put(
			"samplesbInteger", SampleSB::getSamplesbInteger);
		attributeSetterBiConsumers.put(
			"samplesbInteger",
			(BiConsumer<SampleSB, Integer>)SampleSB::setSamplesbInteger);
		attributeGetterFunctions.put(
			"samplesbRichText", SampleSB::getSamplesbRichText);
		attributeSetterBiConsumers.put(
			"samplesbRichText",
			(BiConsumer<SampleSB, String>)SampleSB::setSamplesbRichText);
		attributeGetterFunctions.put("samplesbText", SampleSB::getSamplesbText);
		attributeSetterBiConsumers.put(
			"samplesbText",
			(BiConsumer<SampleSB, String>)SampleSB::setSamplesbText);
		attributeGetterFunctions.put("groupId", SampleSB::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<SampleSB, Long>)SampleSB::setGroupId);
		attributeGetterFunctions.put("companyId", SampleSB::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<SampleSB, Long>)SampleSB::setCompanyId);
		attributeGetterFunctions.put("userId", SampleSB::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<SampleSB, Long>)SampleSB::setUserId);
		attributeGetterFunctions.put("userName", SampleSB::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<SampleSB, String>)SampleSB::setUserName);
		attributeGetterFunctions.put("createDate", SampleSB::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<SampleSB, Date>)SampleSB::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", SampleSB::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SampleSB, Date>)SampleSB::setModifiedDate);
		attributeGetterFunctions.put("urlTitle", SampleSB::getUrlTitle);
		attributeSetterBiConsumers.put(
			"urlTitle", (BiConsumer<SampleSB, String>)SampleSB::setUrlTitle);
		attributeGetterFunctions.put(
			"samplesbTitleName", SampleSB::getSamplesbTitleName);
		attributeSetterBiConsumers.put(
			"samplesbTitleName",
			(BiConsumer<SampleSB, String>)SampleSB::setSamplesbTitleName);
		attributeGetterFunctions.put(
			"samplesbSummaryName", SampleSB::getSamplesbSummaryName);
		attributeSetterBiConsumers.put(
			"samplesbSummaryName",
			(BiConsumer<SampleSB, String>)SampleSB::setSamplesbSummaryName);
		attributeGetterFunctions.put("status", SampleSB::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<SampleSB, Integer>)SampleSB::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", SampleSB::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<SampleSB, Long>)SampleSB::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", SampleSB::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<SampleSB, String>)SampleSB::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", SampleSB::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<SampleSB, Date>)SampleSB::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSamplesbId() {
		return _samplesbId;
	}

	@Override
	public void setSamplesbId(long samplesbId) {
		_columnBitmask |= SAMPLESBID_COLUMN_BITMASK;

		if (!_setOriginalSamplesbId) {
			_setOriginalSamplesbId = true;

			_originalSamplesbId = _samplesbId;
		}

		_samplesbId = samplesbId;
	}

	public long getOriginalSamplesbId() {
		return _originalSamplesbId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask |= TITLE_COLUMN_BITMASK;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@JSON
	@Override
	public boolean getSamplesbBooleanStat() {
		return _samplesbBooleanStat;
	}

	@JSON
	@Override
	public boolean isSamplesbBooleanStat() {
		return _samplesbBooleanStat;
	}

	@Override
	public void setSamplesbBooleanStat(boolean samplesbBooleanStat) {
		_columnBitmask |= SAMPLESBBOOLEANSTAT_COLUMN_BITMASK;

		if (!_setOriginalSamplesbBooleanStat) {
			_setOriginalSamplesbBooleanStat = true;

			_originalSamplesbBooleanStat = _samplesbBooleanStat;
		}

		_samplesbBooleanStat = samplesbBooleanStat;
	}

	public boolean getOriginalSamplesbBooleanStat() {
		return _originalSamplesbBooleanStat;
	}

	@JSON
	@Override
	public Date getSamplesbDateTime() {
		return _samplesbDateTime;
	}

	@Override
	public void setSamplesbDateTime(Date samplesbDateTime) {
		_columnBitmask |= SAMPLESBDATETIME_COLUMN_BITMASK;

		if (_originalSamplesbDateTime == null) {
			_originalSamplesbDateTime = _samplesbDateTime;
		}

		_samplesbDateTime = samplesbDateTime;
	}

	public Date getOriginalSamplesbDateTime() {
		return _originalSamplesbDateTime;
	}

	@JSON
	@Override
	public String getSamplesbDocumentLibrary() {
		if (_samplesbDocumentLibrary == null) {
			return "";
		}
		else {
			return _samplesbDocumentLibrary;
		}
	}

	@Override
	public void setSamplesbDocumentLibrary(String samplesbDocumentLibrary) {
		_columnBitmask |= SAMPLESBDOCUMENTLIBRARY_COLUMN_BITMASK;

		if (_originalSamplesbDocumentLibrary == null) {
			_originalSamplesbDocumentLibrary = _samplesbDocumentLibrary;
		}

		_samplesbDocumentLibrary = samplesbDocumentLibrary;
	}

	public String getOriginalSamplesbDocumentLibrary() {
		return GetterUtil.getString(_originalSamplesbDocumentLibrary);
	}

	@JSON
	@Override
	public double getSamplesbDouble() {
		return _samplesbDouble;
	}

	@Override
	public void setSamplesbDouble(double samplesbDouble) {
		_columnBitmask |= SAMPLESBDOUBLE_COLUMN_BITMASK;

		if (!_setOriginalSamplesbDouble) {
			_setOriginalSamplesbDouble = true;

			_originalSamplesbDouble = _samplesbDouble;
		}

		_samplesbDouble = samplesbDouble;
	}

	public double getOriginalSamplesbDouble() {
		return _originalSamplesbDouble;
	}

	@JSON
	@Override
	public int getSamplesbInteger() {
		return _samplesbInteger;
	}

	@Override
	public void setSamplesbInteger(int samplesbInteger) {
		_columnBitmask |= SAMPLESBINTEGER_COLUMN_BITMASK;

		if (!_setOriginalSamplesbInteger) {
			_setOriginalSamplesbInteger = true;

			_originalSamplesbInteger = _samplesbInteger;
		}

		_samplesbInteger = samplesbInteger;
	}

	public int getOriginalSamplesbInteger() {
		return _originalSamplesbInteger;
	}

	@JSON
	@Override
	public String getSamplesbRichText() {
		if (_samplesbRichText == null) {
			return "";
		}
		else {
			return _samplesbRichText;
		}
	}

	@Override
	public void setSamplesbRichText(String samplesbRichText) {
		_columnBitmask |= SAMPLESBRICHTEXT_COLUMN_BITMASK;

		if (_originalSamplesbRichText == null) {
			_originalSamplesbRichText = _samplesbRichText;
		}

		_samplesbRichText = samplesbRichText;
	}

	public String getOriginalSamplesbRichText() {
		return GetterUtil.getString(_originalSamplesbRichText);
	}

	@JSON
	@Override
	public String getSamplesbText() {
		if (_samplesbText == null) {
			return "";
		}
		else {
			return _samplesbText;
		}
	}

	@Override
	public void setSamplesbText(String samplesbText) {
		_columnBitmask |= SAMPLESBTEXT_COLUMN_BITMASK;

		if (_originalSamplesbText == null) {
			_originalSamplesbText = _samplesbText;
		}

		_samplesbText = samplesbText;
	}

	public String getOriginalSamplesbText() {
		return GetterUtil.getString(_originalSamplesbText);
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return "";
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_columnBitmask |= URLTITLE_COLUMN_BITMASK;

		if (_originalUrlTitle == null) {
			_originalUrlTitle = _urlTitle;
		}

		_urlTitle = urlTitle;
	}

	public String getOriginalUrlTitle() {
		return GetterUtil.getString(_originalUrlTitle);
	}

	@JSON
	@Override
	public String getSamplesbTitleName() {
		if (_samplesbTitleName == null) {
			return "";
		}
		else {
			return _samplesbTitleName;
		}
	}

	@Override
	public void setSamplesbTitleName(String samplesbTitleName) {
		_samplesbTitleName = samplesbTitleName;
	}

	@JSON
	@Override
	public String getSamplesbSummaryName() {
		if (_samplesbSummaryName == null) {
			return "";
		}
		else {
			return _samplesbSummaryName;
		}
	}

	@Override
	public void setSamplesbSummaryName(String samplesbSummaryName) {
		_samplesbSummaryName = samplesbSummaryName;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(SampleSB.class.getName()));
	}

	@Override
	public com.liferay.trash.kernel.model.TrashEntry getTrashEntry()
		throws PortalException {

		if (!isInTrash()) {
			return null;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return trashEntry;
		}

		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if (Validator.isNotNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			ContainerModel containerModel = null;

			try {
				containerModel = trashHandler.getParentContainerModel(this);
			}
			catch (NoSuchModelException noSuchModelException) {
				return null;
			}

			while (containerModel != null) {
				if (containerModel instanceof TrashedModel) {
					TrashedModel trashedModel = (TrashedModel)containerModel;

					return trashedModel.getTrashEntry();
				}

				trashHandler =
					com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
						getTrashHandler(
							trashHandler.getContainerModelClassName(
								containerModel.getContainerModelId()));

				if (trashHandler == null) {
					return null;
				}

				containerModel = trashHandler.getContainerModel(
					containerModel.getParentContainerModelId());
			}
		}

		return null;
	}

	@Override
	public long getTrashEntryClassPK() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Judson (7.1.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public com.liferay.portal.kernel.trash.TrashHandler getTrashHandler() {
		return com.liferay.portal.kernel.trash.TrashHandlerRegistryUtil.
			getTrashHandler(getModelClassName());
	}

	@Override
	public boolean isInTrash() {
		if (getStatus() == WorkflowConstants.STATUS_IN_TRASH) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInTrashContainer() {
		com.liferay.portal.kernel.trash.TrashHandler trashHandler =
			getTrashHandler();

		if ((trashHandler == null) ||
			Validator.isNull(
				trashHandler.getContainerModelClassName(getPrimaryKey()))) {

			return false;
		}

		try {
			ContainerModel containerModel =
				trashHandler.getParentContainerModel(this);

			if (containerModel == null) {
				return false;
			}

			if (containerModel instanceof TrashedModel) {
				return ((TrashedModel)containerModel).isInTrash();
			}
		}
		catch (Exception exception) {
		}

		return false;
	}

	@Override
	public boolean isInTrashExplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return true;
		}

		return false;
	}

	@Override
	public boolean isInTrashImplicitly() {
		if (!isInTrash()) {
			return false;
		}

		com.liferay.trash.kernel.model.TrashEntry trashEntry =
			com.liferay.trash.kernel.service.TrashEntryLocalServiceUtil.
				fetchEntry(getModelClassName(), getTrashEntryClassPK());

		if (trashEntry != null) {
			return false;
		}

		return true;
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SampleSB.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SampleSB toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SampleSB>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SampleSBImpl sampleSBImpl = new SampleSBImpl();

		sampleSBImpl.setMvccVersion(getMvccVersion());
		sampleSBImpl.setUuid(getUuid());
		sampleSBImpl.setSamplesbId(getSamplesbId());
		sampleSBImpl.setTitle(getTitle());
		sampleSBImpl.setSamplesbBooleanStat(isSamplesbBooleanStat());
		sampleSBImpl.setSamplesbDateTime(getSamplesbDateTime());
		sampleSBImpl.setSamplesbDocumentLibrary(getSamplesbDocumentLibrary());
		sampleSBImpl.setSamplesbDouble(getSamplesbDouble());
		sampleSBImpl.setSamplesbInteger(getSamplesbInteger());
		sampleSBImpl.setSamplesbRichText(getSamplesbRichText());
		sampleSBImpl.setSamplesbText(getSamplesbText());
		sampleSBImpl.setGroupId(getGroupId());
		sampleSBImpl.setCompanyId(getCompanyId());
		sampleSBImpl.setUserId(getUserId());
		sampleSBImpl.setUserName(getUserName());
		sampleSBImpl.setCreateDate(getCreateDate());
		sampleSBImpl.setModifiedDate(getModifiedDate());
		sampleSBImpl.setUrlTitle(getUrlTitle());
		sampleSBImpl.setSamplesbTitleName(getSamplesbTitleName());
		sampleSBImpl.setSamplesbSummaryName(getSamplesbSummaryName());
		sampleSBImpl.setStatus(getStatus());
		sampleSBImpl.setStatusByUserId(getStatusByUserId());
		sampleSBImpl.setStatusByUserName(getStatusByUserName());
		sampleSBImpl.setStatusDate(getStatusDate());

		sampleSBImpl.resetOriginalValues();

		return sampleSBImpl;
	}

	@Override
	public int compareTo(SampleSB sampleSB) {
		long primaryKey = sampleSB.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SampleSB)) {
			return false;
		}

		SampleSB sampleSB = (SampleSB)obj;

		long primaryKey = sampleSB.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		SampleSBModelImpl sampleSBModelImpl = this;

		sampleSBModelImpl._originalUuid = sampleSBModelImpl._uuid;

		sampleSBModelImpl._originalSamplesbId = sampleSBModelImpl._samplesbId;

		sampleSBModelImpl._setOriginalSamplesbId = false;

		sampleSBModelImpl._originalTitle = sampleSBModelImpl._title;

		sampleSBModelImpl._originalSamplesbBooleanStat =
			sampleSBModelImpl._samplesbBooleanStat;

		sampleSBModelImpl._setOriginalSamplesbBooleanStat = false;

		sampleSBModelImpl._originalSamplesbDateTime =
			sampleSBModelImpl._samplesbDateTime;

		sampleSBModelImpl._originalSamplesbDocumentLibrary =
			sampleSBModelImpl._samplesbDocumentLibrary;

		sampleSBModelImpl._originalSamplesbDouble =
			sampleSBModelImpl._samplesbDouble;

		sampleSBModelImpl._setOriginalSamplesbDouble = false;

		sampleSBModelImpl._originalSamplesbInteger =
			sampleSBModelImpl._samplesbInteger;

		sampleSBModelImpl._setOriginalSamplesbInteger = false;

		sampleSBModelImpl._originalSamplesbRichText =
			sampleSBModelImpl._samplesbRichText;

		sampleSBModelImpl._originalSamplesbText =
			sampleSBModelImpl._samplesbText;

		sampleSBModelImpl._originalGroupId = sampleSBModelImpl._groupId;

		sampleSBModelImpl._setOriginalGroupId = false;

		sampleSBModelImpl._originalCompanyId = sampleSBModelImpl._companyId;

		sampleSBModelImpl._setOriginalCompanyId = false;

		sampleSBModelImpl._originalUserId = sampleSBModelImpl._userId;

		sampleSBModelImpl._setOriginalUserId = false;

		sampleSBModelImpl._setModifiedDate = false;

		sampleSBModelImpl._originalUrlTitle = sampleSBModelImpl._urlTitle;

		sampleSBModelImpl._originalStatus = sampleSBModelImpl._status;

		sampleSBModelImpl._setOriginalStatus = false;

		sampleSBModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SampleSB> toCacheModel() {
		SampleSBCacheModel sampleSBCacheModel = new SampleSBCacheModel();

		sampleSBCacheModel.mvccVersion = getMvccVersion();

		sampleSBCacheModel.uuid = getUuid();

		String uuid = sampleSBCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			sampleSBCacheModel.uuid = null;
		}

		sampleSBCacheModel.samplesbId = getSamplesbId();

		sampleSBCacheModel.title = getTitle();

		String title = sampleSBCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			sampleSBCacheModel.title = null;
		}

		sampleSBCacheModel.samplesbBooleanStat = isSamplesbBooleanStat();

		Date samplesbDateTime = getSamplesbDateTime();

		if (samplesbDateTime != null) {
			sampleSBCacheModel.samplesbDateTime = samplesbDateTime.getTime();
		}
		else {
			sampleSBCacheModel.samplesbDateTime = Long.MIN_VALUE;
		}

		sampleSBCacheModel.samplesbDocumentLibrary =
			getSamplesbDocumentLibrary();

		String samplesbDocumentLibrary =
			sampleSBCacheModel.samplesbDocumentLibrary;

		if ((samplesbDocumentLibrary != null) &&
			(samplesbDocumentLibrary.length() == 0)) {

			sampleSBCacheModel.samplesbDocumentLibrary = null;
		}

		sampleSBCacheModel.samplesbDouble = getSamplesbDouble();

		sampleSBCacheModel.samplesbInteger = getSamplesbInteger();

		sampleSBCacheModel.samplesbRichText = getSamplesbRichText();

		String samplesbRichText = sampleSBCacheModel.samplesbRichText;

		if ((samplesbRichText != null) && (samplesbRichText.length() == 0)) {
			sampleSBCacheModel.samplesbRichText = null;
		}

		sampleSBCacheModel.samplesbText = getSamplesbText();

		String samplesbText = sampleSBCacheModel.samplesbText;

		if ((samplesbText != null) && (samplesbText.length() == 0)) {
			sampleSBCacheModel.samplesbText = null;
		}

		sampleSBCacheModel.groupId = getGroupId();

		sampleSBCacheModel.companyId = getCompanyId();

		sampleSBCacheModel.userId = getUserId();

		sampleSBCacheModel.userName = getUserName();

		String userName = sampleSBCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sampleSBCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sampleSBCacheModel.createDate = createDate.getTime();
		}
		else {
			sampleSBCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sampleSBCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sampleSBCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sampleSBCacheModel.urlTitle = getUrlTitle();

		String urlTitle = sampleSBCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			sampleSBCacheModel.urlTitle = null;
		}

		sampleSBCacheModel.samplesbTitleName = getSamplesbTitleName();

		String samplesbTitleName = sampleSBCacheModel.samplesbTitleName;

		if ((samplesbTitleName != null) && (samplesbTitleName.length() == 0)) {
			sampleSBCacheModel.samplesbTitleName = null;
		}

		sampleSBCacheModel.samplesbSummaryName = getSamplesbSummaryName();

		String samplesbSummaryName = sampleSBCacheModel.samplesbSummaryName;

		if ((samplesbSummaryName != null) &&
			(samplesbSummaryName.length() == 0)) {

			sampleSBCacheModel.samplesbSummaryName = null;
		}

		sampleSBCacheModel.status = getStatus();

		sampleSBCacheModel.statusByUserId = getStatusByUserId();

		sampleSBCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = sampleSBCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			sampleSBCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			sampleSBCacheModel.statusDate = statusDate.getTime();
		}
		else {
			sampleSBCacheModel.statusDate = Long.MIN_VALUE;
		}

		return sampleSBCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SampleSB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SampleSB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SampleSB, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((SampleSB)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SampleSB, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SampleSB, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SampleSB, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SampleSB)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SampleSB>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _mvccVersion;
	private String _uuid;
	private String _originalUuid;
	private long _samplesbId;
	private long _originalSamplesbId;
	private boolean _setOriginalSamplesbId;
	private String _title;
	private String _originalTitle;
	private boolean _samplesbBooleanStat;
	private boolean _originalSamplesbBooleanStat;
	private boolean _setOriginalSamplesbBooleanStat;
	private Date _samplesbDateTime;
	private Date _originalSamplesbDateTime;
	private String _samplesbDocumentLibrary;
	private String _originalSamplesbDocumentLibrary;
	private double _samplesbDouble;
	private double _originalSamplesbDouble;
	private boolean _setOriginalSamplesbDouble;
	private int _samplesbInteger;
	private int _originalSamplesbInteger;
	private boolean _setOriginalSamplesbInteger;
	private String _samplesbRichText;
	private String _originalSamplesbRichText;
	private String _samplesbText;
	private String _originalSamplesbText;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _urlTitle;
	private String _originalUrlTitle;
	private String _samplesbTitleName;
	private String _samplesbSummaryName;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _columnBitmask;
	private SampleSB _escapedModel;

}